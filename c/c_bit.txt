无论是左移还是右移，当某位从一端移出时，另一端出现的空白将以从外面移入的 0（某些
计算机是送 1，详细内容请查阅相应 C 编译程序用户手册）来补充。这说明，移位不同于循
环，从一端移出的位并不送回到另一端去，移去的位永远丢失了，同时在另一端只能补上相
应位数的 0。
移位操作可用于整数的快速乘除运算，左移一位等效于乘 2，而右移一位等效于除以 2。
如：x = 7， 二进制表达为：0000 0111，
x < < 1 0000 1110，相当于： x =2*7=14，
x < < 3 0111 0000，相当于： x=14*2*2*2=112
x < < 2 1100 0000， x= 192
在作第三次左移时，其中一位为 1 的位移到外面去了，而左边只能以 0 补齐，因而便不等于
112*2*2=448，而是等于 192 了。当 x 按刚才的步骤反向移动回去时，就不能返回到原来的
值了，因为左边丢掉的一个 1，再也不能找回来了：
x > > 2 0011 0000， x=48
x > > 3 0000 0110 x=48/8=6
x > > 1 0000 0011 x=6/2=3


PORTA = 0x87
给整个 PORTA 赋值，作用是将 1000 0111 这个数赋予 PORTA，即让 PORTA 的第 0、1、2
和 7 位置 1，其它位清 0。

② PORTA = (1<<7)
给整个 PORTA 赋值，作用等价于 PORTA = 0x80，将 1000 0000 这个数赋予 PORTA，将指
定的第 7 位置 1，其余各位置 0。只不过这里包括了两个步骤，即先是括号中的 1<<7 操作，
表示将 0x01 这个数左移 7 位，其值变成 0x80，再将它赋予 PORTA。

PORTA = (1<<7) | (1<< 3) | (1<< 2)
给整个 PORTA 赋值，作用与②中的操作相同，但是是分别对 7、3、2 位置 1，而将其它各
位均置 0。它先要分别对三个括号中给定的值进行移位操作，再将它们按位“与”，最后将
值赋予 PORTA。即：
1000 0000 (1<< 7)
0000 1000 (1<< 3)
| 0000 0100 (1<< 2)
PORTA = 1000 1100
④ PORTA & = 0x80
使 PORTA 中的指定位清 0，等价于 PORTA =PORTA & (0x80)。由于 0x80 的二进制表达形
式为 1000 0000，利用其最高位为 1，其它各位均为 0 的特性，作为一个模板将其等于 1 的
那些位(如本例中的第 7 位)屏蔽起来，使之保持不变，而将其它位清 0(不管原来为 0 还是为
1)。因为 PORTA 与 0x80 按位“与”的结果如下：
PORTA = 0x87 1000 0111
& 0x80 1000 0000
= 1000 0000
操作后，第 7 位的原来值 1 被保留，其它各个位被清 0，其中最低的 3 位原来为 1，现在均
为 0 了

⑥PORTA & = ~ (1 << 7)
该指令在等号后面加了取反符号 ~ 。与上一条操作的区别是，在与 PORTA 做按位“与”
前，还将 0x80 先行取反，将 1000 0000 转换成 0111 1111，再做按位“与”操作。这样的操
作结果是将指定的第 7 位清零，其它各位保持不变。
⑦ PORTA | = (1<<7)
等价于 PORTA = PORTA | (1<<7)，这里也是先执行括号中的 1<<7 操作，将 0x01 左移 7 位，
其值变成 0x80，再将它与 PORTA 做按位“或”。
若操作前 PORTA 的初始值为 0x07，则：
PORTA 0000 0111| 0x80 1000 0000
PORTA = 1000 0111
该操作将最高位置 1，其它各位保持不变。
要注意的是，这条指令与 PORTA = (1<<7) 相比，虽然都可以使指定的某一位置 1，但它们
有着不同之处。PORTA = (1<<7) 执行后，虽然某一位被置 1 了，但其它的位却被修改了，
即不管 PORTA 的初始值为什么，原来为 1 的位都会被 0 覆盖，执行的结果总是为 1000 0000。
而本条指令却可以将其它位屏蔽起来，在改变要设置的那一位的同时，并不改变其它位的状
态。


将寄存器的指定位置1或清0在实际应用中，经常利用： PORTA|=(1<<n)这条指令将寄存器的任意位置1，而又不影响其它位的现有状态。比如说，你如果想将第4位置1，就使用： PORTA|=(1<<4)就行了。当然，也可以使用： PORTA|=(1<<7)|(1<<4)|(1<<0)这样的指令一次将设第8、5和1位置1，但又不影响到其它位的状态。 在实际应用中，经常利用： PORTA&=~(1<<n)这条指令将寄存器的任意位清0，而又不影响其它位的现有状态。比如说，你如果想将第4位清0，就使用：PORTA&=~(1<<4)就行了。 在启动nRF905芯片向空中发送数据时，采用以下函数：/*ShockBurst发射数据*/voidnrf905_TxSend(void){ PORTD|=(1<<TRXCE);DelayUs(1);//>10us PORTD&=~(1<<TRXCE);} 其中让PORTD中控制TRX_CE信号的那一位先置1，再清0，输出一高一低的脉冲信号，就在一个脉冲周期内，完成了一次数据发送。因为在程序的开头已经定义TRX_CE信号为PD6位，即TRXCE=6，因而上面两行程序等价于：PORTD|=(1<<6);PORTD&=~(1<<6)

