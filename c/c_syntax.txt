数组的初始化
int a[10]={ 0,1,2,3,4,5,6,7,8,9 };
------------
C语言中好像没有这种数据类型，但是在实际应用的过程中，发现许多人的代码中都存在这种表示方式。其实uintX-t就是通过typedef定义的，利用预编译和typedef可提高效率也方便代码移植。总结如下：

typedef unsigned char   uint8_t;     //无符号8位数

    typedef signed   char   int8_t;      //有符号8位数

    typedef unsigned int    uint16_t;    //无符号16位数

    typedef signed   int    int16_t;     //有符号16位数

    typedef unsigned long   uint32_t;    //无符号32位数

    typedef signed   long   int32_t;     //有符号32位数

    typedef float           float32;     //单精度浮点数

typedef double          float64;     //双精度浮点数

一般来说整形对应的*_t类型为：
    uint8_t为1字节    

    uint16_t为2字节  

    uint32_t为4字节    

    uint64_t为8字节    

不难看出，通过头文件X.h定义了uint8_t,其实编译器实际上是把它作为"char"来处理的，在对字符型的变量进行操作。以上仅做参考，有错误请指出。
------------------------------------------
zmq_pollitem_t items [] = {
        { receiver, 0, ZMQ_POLLIN, 0 },
        { subscriber, 0, ZMQ_POLLIN, 0 }
    };
-------------------------------
从POSIX规范开始：

创建对象的方法如果失败了会返回NULL；
其他方法执行成功时会返回0，失败时会返回其他值（一般是-1）；
错误代码可以从变量errno中获得，或者调用zmq_errno()函数；
错误消息可以调用zmq_strerror()函数获得。
有两种情况不应该被认为是错误：

当线程使用NOBLOCK方式调用zmq_recv()时，若没有接收到消息，该方法会返回-1，并设置errno为EAGAIN；
当线程调用zmq_term()时，若其他线程正在进行阻塞式的处理，该函数会中止所有的处理，关闭套接字，并使得那些阻塞方法的返回值为-1，errno设置为ETERM。
遵循以上规则，你就可以在ZMQ程序中使用断言了：

void *context = zmq_init (1);
assert (context);
void *socket = zmq_socket (context, ZMQ_REP);
assert (socket);
int rc;
rc = zmq_bind (socket, "tcp://*:5555");
assert (rc == 0);
-------------------------
任何长时间运行的程序都应该妥善的管理内存，否则最终会发生内存溢出，导致程序崩溃。如果你所使用的编程序言会自动帮你完成内存管理，那就要恭喜你了。但若你使用类似C/C++之类的语言时，就需要自己动手进行内存管理了。下面会介绍一个名为valgrind的工具，可以用它来报告内存泄露的问题。

-----------------------------------------
比较著名的命名规则首推匈牙利命名法，
这种命名方法是由Microsoft程序员查尔斯·西蒙尼(Charles Simonyi) 提出的。
其主要思想是“在变量和函数名中加入前缀以增进人们对程序的理解”。
匈牙利命名法关键是：标识符的名字以一个或者多个小写字母开头作为前缀；
前缀之后的是首字母大写的一个单词或多个单词组合，该单词要指明变量的用途。
例如：lpszStr, 表示指向一个以'/0'结尾的字符串（sz）的长指针（lp）变量。

骆驼（Camel）命名法近年来越来越流行，
在许多新的函数库和Java这样的平台下使用得当相多。
骆驼命名法，正如它的名称所表示的那样，指的是混合使用大小写字母来构成标识符的名字。
其中第一个单词首字母小写，余下的单词首字母大写。
例如：printEmployeePaychecks()，函数名中每一个逻辑断点都有一个大写字母来标记。

另一种流行的命名规则称为下划线命名法。
下划线法是随着C语言的出现流行起来的，在UNIX/LIUNX这样的环境，以及GNU代码中使用非常普遍。

-------------------------------------------
因为整形数据在内存中是以2进制本数的补码存在的；但正整数的补码还是原来的2进制，而负数则要先取反再+1才是它的补码，（+1后的最左边以为就是符号位，1为负，0为正；）比如-10的二进制： 1、先取-10的绝对值的二进制数值，为0000000000001010；    2、取反，1111111111110101     3、加1：1111111111110110；  这个就是-10在内存中的储存形式；
----------------------------------------------

	char buf[50];
	int a = 3;
	int b = 5;
	sprintf(buf, "%d plus %d = %d", a ,b , a+b);
	printf("%s \n", buf);
--------------------------------------------------------------------------------
	for (i =0 ,len = strlen(buf); i < len ;i++) buf[i] = toupper(buf[i]);
--------------------------------------------------------------------------------
	newlen =(start > end) ? 0 : (end -  start) + 1;
--------------------------------------------------------------------------------
先回忆各个系统中常见的内存分配函数：
malloc()分配一块指定大小的内存区域，并返回指向区域开头的指针，若分配失
败，则返回NULL。

calloc()与malloc()一样，分配一块指定大小的内存区域，成功时返回区域头指
针，失败返回NULL。区别在于，calloc()的输入参数为count和size，即分配的项的数
目，及每一项的大小。calloc()在成功分配内存空间后，会将空间内所有值置0。

realloc()修改已分配的内存块的大小。若已分配的内存块后没有足够的空间用于扩
展内存块，则重新申请一块满足需要的内存块，并将旧的数据拷贝到新位置，释放旧的内存
块，返回指向新的内存块的指针；否则直接扩展原有的内存块。若分配失败，返回NULL。
--------------------------------------------------------------------------------
void *zmalloc(size_t size) {
void *ptr = malloc(size+PREFIX_SIZE);
if (!ptr) zmalloc_oom(size);
#ifdef HAVE_MALLOC_SIZE
update_zmalloc_stat_alloc(redis_malloc_size(ptr),size);
return ptr;
#else
*((size_t*)ptr) = size; // 在头部记录内存块的长度
update_zmalloc_stat_alloc(size+PREFIX_SIZE,size);
return (char*)ptr+PREFIX_SIZE;
#endif
}
--------------------------------------------------------------------------------

typedef union epoll_data
{
  void *ptr;
  int fd;
  uint32_t u32;
  uint64_t u64;
} epoll_data_t;

struct epoll_event
{
  uint32_t events;	/* Epoll events */
  epoll_data_t data;	/* User data variable */
} __EPOLL_PACKED;


enum EPOLL_EVENTS
  {
    EPOLLIN = 0x001,
    EPOLLPRI = 0x002,
    EPOLLOUT = 0x004,
    EPOLLRDNORM = 0x040,
    EPOLLRDBAND = 0x080,
    EPOLLWRNORM = 0x100,
    EPOLLWRBAND = 0x200,
    EPOLLMSG = 0x400,
    EPOLLERR = 0x008,
    EPOLLHUP = 0x010,
    EPOLLRDHUP = 0x2000,
    EPOLLWAKEUP = 1u << 29,
    EPOLLONESHOT = 1u << 30,
    EPOLLET = 1u << 31
  };


-----------------------------------------------------------------------------------
//参数传递引用
static int aeApiCreate(aeEventLoop *eventLoop) {
    aeApiState *state = zmalloc(sizeof(aeApiState));

    if (!state) return -1;
    state->epfd = epoll_create(1024); /* 1024 is just an hint for the kernel */
    if (state->epfd == -1) return -1;
    eventLoop->apidata = state;
    return 0;
}
-----------------------------------------------------------------------------------
static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {
    aeApiState *state = eventLoop->apidata;
    int retval, numevents = 0;

    retval = epoll_wait(state->epfd,state->events,AE_SETSIZE,
            tvp ? (tvp->tv_sec*1000 + tvp->tv_usec/1000) : -1);
    if (retval > 0) {
        int j;

        numevents = retval;
        for (j = 0; j < numevents; j++) {
            int mask = 0;
            struct epoll_event *e = state->events+j;

            if (e->events & EPOLLIN) mask |= AE_READABLE;
            if (e->events & EPOLLOUT) mask |= AE_WRITABLE;
            eventLoop->fired[j].fd = e->data.fd;
            eventLoop->fired[j].mask = mask;
        }
    }
    return numevents;
}
-----------------------------------------------------------------------------------

#ifndef	_SYS_SOCKET_H
#define	_SYS_SOCKET_H	1
-----------------------------------------------------------------------------------
TCP服务器端依次调用socket()、bind()、listen()之后，就会监听指定的socket地址了。TCP客户端依次调用socket()、connect()之后就想TCP服务器发送了一个连接请求。TCP服务器监听到这个请求之后，就会调用accept()函数取接收请求，这样连接就建立好了。之后就可以开始网络I/O操作了，即类同于普通文件的读写I/O操作。

int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
accept函数的第一个参数为服务器的socket描述字，第二个参数为指向struct sockaddr *的指针，用于返回客户端的协议地址，第三个参数为协议地址的长度。如果accpet成功，那么其返回值是由内核自动生成的一个全新的描述字，代表与返回客户的TCP连接。

注意：accept的第一个参数为服务器的socket描述字，是服务器开始调用socket()函数生成的，称为监听socket描述字；而accept函数返回的是已连接的socket描述字。一个服务器通常通常仅仅只创建一个监听socket描述字，它在该服务器的生命周期内一直存在。内核为每个由服务器进程接受的客户连接创建了一个已连接socket描述字，当服务器完成了对某个客户的服务，相应的已连接socket描述字就被关闭。
----------------------------------------------------------------------------------
static void anetSetError(char *err, const char *fmt, ...)
{
    va_list ap;

    if (!err) return;
    va_start(ap, fmt);
    vsnprintf(err, ANET_ERR_LEN, fmt, ap);
    va_end(ap);
}
----------------------------------------------------------------------------------
int anetTcpKeepAlive(char *err, int fd)
{
    int yes = 1;
    if (setsockopt(fd, SOL_SOCKET, SO_KEEPALIVE, &yes, sizeof(yes)) == -1) {
        anetSetError(err, "setsockopt SO_KEEPALIVE: %s\n", strerror(errno));
        return ANET_ERR;
    }
    return ANET_OK;
}
----------------------------------------------------------------------------------
