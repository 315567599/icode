在编程概念中，表达式和语句分别是什么概念？

表达式（Expression）有值，而语句（Statement）不总有。
-----------------------------------------------
表达式是可以被求值的代码，而语句是一段可执行代码。

因为表达式可被求值，所以它可写在赋值语句等号的右侧。
而语句不一定有值，所以像import、for和break等语句就不能被用于赋值。

Python的语句分为两大类：简单和复合语句。
简单语句是指一逻辑行的代码。例如表达式语句、赋值语句和return语句等。
复合语句是指包含、影响或控制一组语句的代码。例如if、try和class语句等。

表达式本身可以作为表达式语句，也能作为赋值语句的右值或if语句的条件等，所以表达式可以作为语句的组成部分，但不是必须成分（例如continue语句）。
---------------------------------------------------

http://blog.csdn.net/u013254721/article/details/17505409

在大部分使用表达式的上下文中，例如在语句或方法参数中，表达式应计算为某个值。
除赋值表达式和方法调用表达式之外，大部分表达式都必须嵌在语句中
-----------------------------------------------
程序所执行的操作以“语句”表达。 常见操作包括声明变量、赋值、调用方法、循环访问集合，以及根据给定条件分支到一个或另一个代码块。 语句在程序中的执行顺序称为“控制流”或“执行流”。 根据程序对运行时所收到的输入的响应，在程序每次运行时控制流可能有所不同。
----------------------------------------------
在 C# 中，运算符是应用于表达式或语句中的一个或多个操作数的程序元素。 接受一个操作数的运算符称为“一元”运算符，例如递增运算符 (++) 或 new。 接受两个操作数的运算符称为“二元”运算符，例如算术运算符 +、-、*、/。 条件运算符 ?: 接受三个操作数，是 C# 中唯一的三元运算符。

操作数可以是由任何长度的代码组成的有效表达式，且可包含任意数量的子表达式。 在包含多个运算符的表达式中，运算符的应用顺序由运算符优先级、关联性和括号确定。
每个运算符都具有已定义的优先级。 在包含具有不同优先级级别的多个运算符的表达式中，运算符的优先级确定运算符的计算顺序。 

当表达式中出现两个或两个以上具有相同优先级的运算符时，将根据结合性计算它们。 左结合运算符按从左到右的顺序计算。 例如，x * y / z 将计算为 (x * y) / z。 右结合运算符按从右到左的顺序计算。 例如，赋值运算符是右关联的。 

赋值运算符和三元运算符 (?:) 是右结合运算符。 其他所有二元运算符都是左结合运算符。

可通过使用圆括号更改运算符优先级和相关性。 例如，2 + 3 * 2 通常计算结果为 8，因为乘法运算符的优先级高于加法运算符。 但是，如果你将表达式编写为 (2 + 3) * 2，则先计算加法，再计算乘法，且结果为 10。 以下示例显示括号表达式中的计算顺序。 如前面的示例中所示，计算操作数之前会应用运算符。
-----------------------------------------------
Lambda 表达式表示没有名称但可以具有输入参数和多个语句的“内联方法”。 它们在 LINQ 中广泛用于向方法传递参数。 Lambda 表达式被编译为委托或表达式树，具体取决于使用它们的上下文。



