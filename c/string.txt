/**
原子操作与字符串处理
  */
static pthread_mutex_t gTempdirLock = PTHREAD_MUTEX_INITIALIZER;

static int gTempdirNonce = 0;
int createTempDir(char *tempDir, int nameMax, int mode)
{
  char tmp[PATH_MAX];
  int pid, nonce;
  const char *base = getenv("TMPDIR");
  if (!base)
    base = "/tmp";
  if (base[0] != '/') {
    // canonicalize non-absolute TMPDIR
    if (realpath(base, tmp) == NULL) {
      return -errno;
    }
    base = tmp;
  }
  pid = getpid();
  pthread_mutex_lock(&gTempdirLock);
  nonce = gTempdirNonce++;
  pthread_mutex_unlock(&gTempdirLock);
  snprintf(tempDir, nameMax, "%s/temp.%08d.%08d", base, pid, nonce);
  if (mkdir(tempDir, mode) == -1) {
    int ret = errno;
    return -ret;
  }
  return 0;
}


    if ((de->d_name[0] == '.') && (de->d_name[1] == '\0'))
      continue;
    if ((de->d_name[0] == '.') && (de->d_name[1] == '.') &&
        (de->d_name[2] == '\0'))
--------------------------------------------------------------------------------
#include <stdio.h>
#include <stddef.h>

void swap(int * a, int * b) {
    int tmp = * a;
    * a = * b;
    * b = tmp;
}

size_t partition(int * ary, size_t len, size_t pivot_i) {
    size_t i = 0;
    size_t small_len = pivot_i;
    int pivot = ary[pivot_i];
    swap(&ary[pivot_i], &ary[pivot_i + (len - 1)]);
    for (; i < len; i++) {
        if (ary[pivot_i + i] < pivot) {
            swap(&ary[pivot_i + i], &ary[small_len]);
            small_len++;
        }
    }
    swap(&ary[pivot_i + (len - 1)], &ary[small_len]);
    return small_len;
}

void quick_sort(int * ary, size_t len) {
    if (len == 0 || len == 1) return;
    size_t small_len = partition(ary, len, 0);
    quick_sort(ary, small_len);
    quick_sort(&ary[small_len + 1], len - small_len - 1);
}

int main(void) {
    int ary[] = {2,4,2,5,3,5,3,1,7,6};
    size_t len = sizeof(ary) / sizeof(ary[0]);
    quick_sort(ary, len);
    return 0;
}


