Certain DB queries operate on way too many rows:
Full table scans: all rows in a table
Unindexed WHEREs: all rows in the result set Filesort: sorts all rows in the result set (n log n)

    主键的选择以及优化：
    InnoDB使用聚集索引，数据记录本身被存于主索引（B+Tree）的叶子节点上。这就要求同一个叶子节 点内（大小为一个内存页或磁盘页）的各条数据记录按主键顺序存放，因此每当有一条新的记录插入时，MySQL会根据其主键将其插入适当的节点和位置，如果 页面达到装载因子（InnoDB默认为15/16），则开辟一个新的页（节点）。这样就会形成一个紧凑的索引结构，近似顺序填满。由于每次插入时也不需要移动已有数据，因此效率很高，也不会增加很多开销在维护索引上。

    如果使用非自增主键（如果身份证号或学号等），由于每次插入主键的值近似于随机，因此每次新纪录都要被插到现有索引页得中间某个位置：此时MySQL不得不为了将新记录插到合适位置而移动数据，甚至目标页面可能已经被回写到磁盘上而从缓存中清掉，此时又要从磁盘上读回来，这增加了 很多开销，同时频繁的移动、分页操作造成了大量的碎片，得到了不够紧凑的索引结构，后续不得不通过OPTIMIZE TABLE来重建表并优化填充页面。如图8所示。

aaz——db。t_user 表设计失败, 因为iUserID 接近随机值

--------------------
索引使用以及优化。
1最左前缀原理:
索引不仅仅可以基于单个列建立，也可以通过多个列建立，这种索引叫做联合索引。
例如，以表user中的a，b，c三个列建立联合索引。
①   全列匹配： select * from user where a = ? and b =? and c = ?;
    全列匹配顾名思义就是戴上了建立索引的三个列的值，这样是可以精确地使用到具体的索引的，即使顺序不同mysql查询优化器会自动调整where语句的顺序（而不是innodb），使之适应索引结构
    ②    最左前缀匹配: select * from user where a = ? and b =? ;
    这样的语句虽然没有提供完全的列值，但是因为索引是从坐车进行连续匹配的，因此也能够使用利用a,b,c三列建立起来的索引。
    ③   使用索引精确匹配，中间某个条件未提供。Select * from user where a = ? and c =? ;
    这种情况下，虽然a和c都在索引列中，但是因为b不存在，所以无法匹配最左前缀的连接。这种情况下一般有两种解决方式，如果有大量的查询通过这种方式进行，可以考虑在a和c列上建立一个联合索引。另一种方法是通过填坑的方式，即如果b列上的值不多的话（例如枚举，或者简单的bit类型），通过将sql优化成 select * from user where a = ? and b in(?,?,?……) and c = ? 的方式能够提升一部分的性能。
    ④    查询没有使用到索引第一列 select * from user where b = ? and c = ?;
        这种情况是不符合最左前缀的，无法使用该索引。
        ⑤   匹配字符串前缀情况 select * from user where a = ? and b= ? and c like ‘abc%’;
            这种情况符合最左前缀，可以使用索引，但如果通配符不是出现在爱末尾，则无法使用。
            ⑥   范围查询 select * from user where a > ? and b = ? and c = ?;
            这种情况能够使用索引，但是b和c列的索引无法使用到，如果范围查询不是最左前缀或者查询条件中有两个范围列则无法使用。
            ⑦   条件中带有函数或者表达式select * from user where a = ? and b = ? and left(c,2) = ‘ba’
            虽然和c like ‘ba%’;达到的效果是一致的，但是由于使用了函数，因此无法使用索引。
            对于使用了表达式的sql，例如 select * from user where a = ? and b = ? and c -1 =?;
            无法使用索引。

----------------------------



