
__ 快速移动到行头
g_ 快速移动到行尾
------------------
:tab split :open new tab with current vim buffer
------------------
If you see a call to a function and wonder what that function does, position the cursor inside of the
function name and hit
 CTRL-].  

This will bring you to the function definition.
An easy way back is with the 
CTRL-T 

command.  
--------------------
v/key :向后复制到key
v?key :向前复制到key
--------------------
) ：光标移至句尾
( ：光标移至句首
}：光标移至段落开头
{：光标移至段落结尾
do：删至行首
d$：删至行尾
：n1,n2 co n3：将n1行到n2行之间的内容拷贝到第n3行下
：n1,n2 m n3：将n1行到n2行之间的内容移至到第n3行下
：n1,n2 d ：将n1行到n2行之间的内容删除

ma　　设置标签a，用`a可以跳转到标签a所在的行。
`a      跳转到标签a。
:marks　　查看当前设置的所有标签。
-------------------
dt" → 删除所有的内容，直到遇到双引号—— "
2dd → 删除2行
3p → 粘贴文本3次
100idesu [ESC] → 会写下 “desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu “
. → 重复上一个命令—— 100 “desu “.
3. → 重复 3 次 “desu” (注意：不是 300，你看，VIM多聪明啊).
shift+v :行选择
------------------
(1) ctags生成tags文件：
ctags -R . 可以搜索目录下所有的文件，并生成 tags 文件。
然后在vim里 :set tags=path/to/tags（用,分隔，可以多个）

最后:tag key 搜索
-------------------
使用行命令 :sh。快速在vim与shell之间切换
　　在 Vi/Vim 的正常模式下输入 :sh即可进入 Linux/Unix shell 环境。在要返回到 Vi/Vim 编辑环境时，输入 exit 命令即可。
-------------------
 %（跳转到与之匹配的括号处），
`.（跳转到最近修改过的位置并定位编辑点），
'.（跳转到最近修改过的位置但不定位编辑点）
-------------------
cw/cW 删除当前单词从光标开始的部分并进入插入模式 
dd 删除当前行 
d0 删除从当前光标开始到行末的内容 
d$ 删除从当前光标开始到行末的内容 
I 在当前行的行首进入插入模式 
A 在当前行的行尾进入插入模式 
o 在当前行下方另起一行进入插入模式 
O 在当前行上方另起一行进入插入模式
d) 删除当前句子从光标位置开始到句末的内容 
d( 删除当前句子从光标位置开始到句首的内容
d} 删除当前段落从光标位置开始到段末的内容 
d{ 删除当前段落从光标位置开始到段首的内容
--------------------
guw 将光标所在的单词变为小写 
gUw 将光标所在的单词变为大写 
guu 光标所在的行所有字符变为小写 
gUU 光标所在的行所有字符变为大写 
--------------------
:%!nl 在所有非空行前加入行号 
:%!nl -ba 在所有行前加入行号
-------------------
ga 显示光标所在字符的内码（包括十进制码，十六进制码以及八进制码）	
------------------
n 搜索下一个 
N 反向搜索下一个
------------------
 :m,ns/str1/str2/g 将 m 行到 n 行中的字串 str1 全部替换为字串 str2。
------------------
Vim在正常模式下，用f  加一个参数是向后搜索一个字符 如 This is a test 然后 f s 就会跳到第一个s，
dfs:找到s，然后删除s到光标之间的字符
------------------
vim 键盘：
Home 键 移动到行首
End 键 移动到行尾
PageUp 线上移动一页
PageDown 向下移动一页
------------------
"w" 移动到下一个单词的词首
 "b" 命令向后移动到前一个词的词首
 "e" 命令可以移到下一个单词的词末，而 "ge" 则移动到前一个单词的末尾
----------------
另一个定位行的方法是使用带数字前缀的 "%" 命令。例如，"50％" 移动到文件的中间， 
而 "90%" 移到差不多结尾的位置
----------------
标记在需要处理一个文件的两个相关地方的时候非常有用。假设你在处理文末的时候需要 
查看文首的一些内容，先移动到行首，设置一个标记 s (start)：

        ms

然后移动到你需要处理的地方，再设置一个标记 e (end)：

        me

现在你可以随意移动，当你需要看开头的地方，可以使用这个命令移到那里：

        's

******然后使用 '' 跳回来。或者用 'e 跳到你正在处理的文尾的地方。
----------------
c2wbe<Esc>
这里 "c2wbe<Esc>" 包括如下操作：

        c       修改操作符 
        2w      移动两个单词的距离（与操作符合起来，它删除两个单词并进入插入模式） 
        be      插入 be 这个单词 
        <Esc>   切换回普通模式
        To err is human 
----------------
"." 是 Vim 中一个非常简单而有用的命令。它重复最后一次的修改操作
----------------
可以使用 "V" 命令来启动可视模式。你会发现在你作任何移动之 
前，整行都被高亮显示了。
----------------
当你用 "d"，"x" 或者其它命令删除文本的时候，这些文字会被存起来。你可以用 p 命 
令重新粘贴出来（p 在 Vim 中表示 put）。 
    看看下面的例子。首先，你会在你要删除的那一行上输入 "dd" 删除一整行，然后 
移动到你要重新插入这行的地方输入 "p" (put)，
----------------
如果你在一个单词的中间而又想删掉这个单词，在你用 "dw" 前，你必须先移到这个单词的 
开始处。这里还有一个更简单的方法："daw"。
caw
----------------
简单键盘映射
映射可以使你把一系列 Vim 命令绑定为一个单键。假设你要用一个大括号将一个特定的 
单词括起来。例如，把 "amount" 变成 "{amount}"。用 ":map" 命令，就可以让 F5 来 
完成这个工作。命令如下：

        :map <F5> i{<Esc>ea}<Esc>

        Note: 
        在输入这个命令时，<F5> 要用四个字符表示。相似地，输入 <Esc> 不是直接按 
        <Esc> 键，而是输入五个字符。在读这份手册要注意这些区别！

让我们来分解一下这个命令： 
    <F5>        F5 功能键。这是命令的触发器。当这个键被按下时，相应的命令即被 
                执行。

    i{<Esc>     插入 { 字符。<Esc> 键用于退出插入模式。

    e           移动到词尾。

    a}<Esc>     插入 } 到单词尾。

你可以映射 "/p" 为在单词两端加园括号，而映射 "/c" 为加花括号，例如：

        :map /p i(<Esc>ea)<Esc> 
        :map /c i{<Esc>ea}<Esc>

你需要在敲入/后，立即敲入p，以便 Vim 知道它们组成一个命令。
----------------
v100j:hardcopy

-----------------
vim-multiple-cursors 插件
fp跳到p处
按下 <C-n> 选中光标下的单词
继续按下 <C-n> 两次选中另外两个相同的单词
按下c进行修改
键入修改
按下 <Esc> 退出
-----------------


from:http://www.cppblog.com/kefeng/archive/2010/10/20/130574.aspx?opt=admin

使用正则表达式的命令最常见的就是 / （搜索）命令。

另一个很有用的命令就是 :s（替换）命令，将第一个//之间的正则表达式替换成第二个//之间的字符串。

:s/正则表达式/替换字符串/选项
<<<<<<< HEAD
-------------
ctrl +f 向下翻页
ctrl+b 向上翻页
------
v选中 zf 折叠 zo取消折叠
－－－－－－－
:set nu 显示行号；set nonu 取消行号显示
-----------
:f 显示文件内容 相当于ctrl＋g
-----------------
vim 注释：
1、进入vi/vim编辑器，按CTRL+V进入可视化模式（VISUAL BLOCK）
2、移动光标上移或者下移，选中多行的开头，如下图所示
3、选择完毕后，按大写的的I键，此时下方会提示进入“insert”模式，输入你要插入的注释符，例如#，
4、最后按ESC键，你就会发现多行代码已经被注释了
----------------
　　缓冲区（Buffer）是一块内存区域，里面存储着正在编辑的文件。如果没有把缓冲区里的文件存盘，那么原始文件不会被更改。

　　:buffers　　命令将会列出当前编辑中所有的缓冲区状态。在这个状态列表中，前面的数字是缓冲区的数字标记，第二个标记就是缓冲区当前的状态，紧接着是与缓冲区所关联的文件名。有如下几种状态：

------------------
水平分屏split(sp) || 垂直分屏vsplit(vs)
---------
　　　　:new  test.txt　　　　　　　用分割形式新建文件
------------------------------
:%!xxd 16进制编辑
----------------
列编辑
1.定位光标
2.Ctrl + v
3.按I键（即按Shift + i），插入内容，此时只有光标所在的第一行有变化，不急
(删除 d，替换 c)
4.按两次Esc，神奇的景象出现了

123efg123456789
123efg123456789
123efg123456789
123efg123456789
123efg123456789
123efg123456789
123efg123456789
123efg123456789
123efg123456789
123efg123456789
-----------------
可视模式下的U或u：把选中的文本变为大写或小写。
----------------
垂直分割窗口时要给窗口增加3个char或者减少3个char 的命令是":vertical resize +3" 或 ":vertical resize -3"。
----------------
   '.               此命令相当好使, 它移动光标到上一次的修改行.
   `.               此命令相当强大, 它移动光标到上一次的修改点.
----------------
yw               表示拷贝从当前光标到光标所在单词结尾的内容.
   dw               表示删除从当前光标到光标所在单词结尾的内容.
   y0               表示拷贝从当前光标到光标所在行首的内容.
   d0               表示删除从当前光标到光标所在行首的内容.
   y$               表示拷贝从当前光标到光标所在行尾的内容.
   d$               表示删除从当前光标到光标所在行尾的内容.
特殊地:
   yy               表示拷贝光标所在行.
   dd               表示删除光标所在行.
---------------
重复上次编辑命令.
--------------
=======
在学习正则表达式时可以利用 / 命令来练习。
---
%s/a/b/g

a 被查找的字符串（正则匹配）；b 要替换成的文字；g 表示全局搜索替换（否则只处理找到的第一个结果）
---


二、元字符

元字符是具有特殊意义的字符。使用元字符可以表达任意字符、行首、行 尾、某几个字符等意义。

元字符一览

元字符	说明
.	匹配任意一个字符
[abc]	匹配方括号中的任意一个字符。可以使用-表示字符范围，
如[a-z0-9]匹 配小写字母和阿拉伯数字。
[^abc]	在方括号内开头使用^符号，表示匹配除方括号中字符之外的任意字符。
\d	匹配阿拉伯数字，等同于[0-9]。
\D	匹配阿拉伯数字之外的任意字符，等同于[^0-9]。
\x	匹配十六进制数字，等同于[0-9A-Fa-f]。
\X	匹配十六进制数字之外的任意字符，等同于[^0-9A-Fa-f]。
\w	匹配单词字母，等同于[0-9A-Za-z_]。
\W	匹配单词字母之外的任意字符，等同于[^0-9A-Za-z_]。
\t	匹配<TAB>字符。
\s	匹配空白字符，等同于[ \t]。
\S	匹配非空白字符，等同于[^ \t]。
另外，如果要查找字符 *、.、/等，则需要在前面用 \ 符号，表示这不是元字符，而只是普通字符而已。

元字符	说明
\*	匹配 * 字符。
\.	匹配 . 字符。
\/	匹配 / 字符。
\\	匹配 \ 字符。
\[	匹配 [ 字符。
表示数量的元字符

元字符	说明
*	匹配0-任意个
\+	匹配1-任意个
\?	匹配0-1个
\{n,m}	匹配n-m个
\{n}	匹配n个
\{n,}	匹配n-任意个
\{,m}	匹配0-m个
表示位置的符号

元字符	说明
$	匹配行尾
^	匹配行首
\<	匹配单词词首
\>	匹配单词词尾
使用例

/char\s\+[A-Za-z_]\w*;                 " 查找所有以char开头，之后是一个以上的空白，
                                             " 最后是一个标识符和分号
/\d\d:\d\d:\d\d                        " 查找如 17:37:01 格式的时间字符串
:g/^\s*$/d                             " 删除只有空白的行
:s/\<four\>/4/g                        " 将所有的four替换成4，但是fourteen中的four不替换
三、替换变量

在正规表达式中使用 \( 和 \) 符号括起正规表达式，即可在后面使用\1、\2 等变量来访问 \( 和 \) 中的内容。

使用例

/\(a\+\)[^a]\+\1                                          " 查找开头和结尾处a的个数相同的字符串，
                                                                  " 如 aabbbaa，aaacccaaa，但是不匹配 abbbaa
:s/\(http:\/\/[-a-z\._~\+%\/]\+\)/<a href="\1">\1<\/a>/   " 将URL替换为<a href="http://url">http://url</a>的格式
:s/\(\w\+\)\s\+\(\w\+\)/\2\t\1                            " 将 data1 data2 修改为 data2 data1
四、函数式

在替换命令 s/// 中可以使用函数表达式来书写替换内容，格式为

:s/替换字符串/\=函数式
在函数式中可以使用 submatch(1)、submatch(2) 等来引用 \1、\2 等的内容，而submatch(0)可以引用匹配的整个内容。

使用例

:%s/\<id\>/\=line(".")                              " 将各行的 id 字符串替换为行号
:%s/^\<\w\+\>/\=(line(".")-10) .".". submatch(1)    " 将每行开头的单词替换为 (行号-10).单词 的格式，
                                                           " 如第11行的 word 替换成 1. word
五、与Perl正则表达式的区别

元字符的区别

Vim语法	Perl语法	含义
\+	+	1-任意个
\?	?	0-1个
\{n,m}	{n,m}	n-m个
\(和\)	(和)	分组

六、vi 正则表达式练习

闲言碎语不要讲…例子说明一切，比如下面这段我需要换成 ubb 标签

vim 命令模式，输入

:%s/.*src=”([^"]*)”[^>]*>/[img]1[/img]/g

替换为

[img ]gu.jpg[ /img]

[img ]os.jpg[ /img]

[img ]hu.jpg[ /img]

[img ]ang.jpg[ /img]

解释如下：

:

命令执行状态

%s

表示查找并替换

%s/a/b/g

a 被查找的字符串（正则匹配）；b 要替换成的文字；g 表示全局搜索替换（否则只处理找到的第一个结果）

([^"]*)

表示非引号的字符N个；外面 () 表示后面替换要用（用 1,…,9等引用）

[/img]

/ 需要被 转义

与其它工具正则不一样的地方在于 () 也必须 ()，怪不得我老是弄不出来。

相关资料：

via http://net.pku.edu.cn/~yhf/tao_regexps_zh.html

vi 命令 作用

:%s/ */ /g 把一个或者多个空格替换为一个空格。

:%s/ *$// 去掉行尾的所有空格。

:%s/^/ / 在每一行头上加入一个空格。

:%s/^[0-9][0-9]* // 去掉行首的所有数字字符。

:%s/b[aeio]g/bug/g 将所有的bag、beg、big和bog改为bug。

:%s/t([aou])g/h1t/g 将所有tag、tog和tug分别改为hat、hot和hug（注意用group的用法和使用1引用前面被匹配的字符）。

Sed

Sed是Stream EDitor的缩写，是Unix下常用的基于文件和管道的编辑工具，可以在手册中得到关于sed的详细信息。

这里是一些有趣的sed脚本，假定我们正在处理一个叫做price.txt的文件。注意这些编辑并不会改变源文件，sed只是处理源文件的每一行并 把结果显示在标准输出中（当然很容易使用重定向来定制）：

sed脚本 描述

sed ’s/^$/d’ price.txt 删除所有空行

sed ’s/^[ ]*$/d’ price.txt 删除所有只包含空格或者制表符的行

sed ’s/”//g’ price.txt 删除所有引号
>>>>>>> 6ff32f9f471df5cf5c89136620eddd8339a1a722

vim 去除 ^M

vim去除^M       :%s/\r/

不知道他是什么，后来上google上搜索原来就是\r ，只不过是样子变成了这样^M.

这就unix文件以\n和windowns 文件以\r\n 换行的区别.

:%s/\r/

就可以去掉了吧
---------
查看当前文件是dos格式还是unix格式。
:set ff?
强制切换为unix格式:
:set ff=unix
:wq
-------------
:set list 显示隐藏符号

